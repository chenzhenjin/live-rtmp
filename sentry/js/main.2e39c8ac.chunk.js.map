{"version":3,"sources":["components/lazyLoad.js","router/mainLayout.jsx","router/mainRouter.jsx","App.js","serviceWorker.js","index.js"],"names":["loadingComponent","loader","loading","Loadable","MainLayout","props","state","tabbarActive","className","path","exact","render","to","component","LazyLoad","this","onClick","changeActive","value","console","log","window","a","b","setState","React","Component","MainRouter","basename","Sentry","dsn","logErrors","release","App","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uTAEMA,EAAmB,WACvB,OAAQ,4CAEK,WAACC,GAAwC,IAAhCC,EAA+B,uDAArBF,EAChC,OAAOG,IAAS,CACdF,SAAQC,aCHSE,G,wDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,aAAc,QAHC,E,qDAMT,IAAD,OACP,OAAO,yBAAKC,UAAU,QACpB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,OAAQ,kBAAM,kBAAC,IAAD,CAAUC,GAAG,aACjD,kBAAC,IAAD,CAAOH,KAAK,QAAQI,UAAWC,GAAS,kBAAM,yDAC9C,kBAAC,IAAD,CAAOL,KAAK,SAASI,UAAWC,GAAS,kBAAM,mCAC/C,kBAAC,IAAD,CAAOH,OAAQ,kBAAM,kBAAC,IAAD,CAAUC,GAAG,cAEpC,yBAAKJ,UAAU,UACb,yBAAKA,UAAU,eACb,yBAAKA,UAAuC,SAA5BO,KAAKT,MAAMC,aACzB,qBAAuB,eACvB,uBAAGC,UAAU,6BACb,kBAAC,IAAD,CAAMI,GAAG,QACPI,QAAS,WAAQ,EAAKC,aAAa,UADrC,yCAMF,yBAAKT,UAAuC,UAA5BO,KAAKT,MAAMC,aACzB,qBAAuB,eACvB,uBAAGC,UAAU,gCACb,kBAAC,IAAD,CAAMI,GAAG,SACPI,QAAS,WAAQ,EAAKC,aAAa,WAEnC,qF,mCAOCC,GACXC,QAAQC,IAAI,mBAAoBC,OAAOC,EAAEC,GACzCR,KAAKS,SAAS,CACZjB,aAAcW,Q,GA1CoBO,IAAMC,YCDzBC,E,kDACnB,WAAYtB,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,GAFI,E,qDAMjB,OAAO,kBAAC,IAAD,CAAMsB,SAAS,IACpB,kBAAC,EAAD,W,GARkCH,IAAMC,W,MCC9CG,EAAY,CACVC,IAAK,8DACLC,WAAU,EACVC,QAAS,cAOIC,MALf,WACE,OACE,kBAAC,EAAD,OCCgBC,QACW,cAA7Bb,OAAOc,SAASC,UAEe,UAA7Bf,OAAOc,SAASC,UAEhBf,OAAOc,SAASC,SAASC,MACvB,2DCZNC,IAAS3B,OAEL,kBAAC,EAAD,MAEF4B,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,c","file":"static/js/main.2e39c8ac.chunk.js","sourcesContent":["import React from 'react'\nimport Loadable from 'react-loadable'\nconst loadingComponent = () => {\n  return (<div>loading...</div>)\n}\nexport default (loader, loading = loadingComponent) => {\n  return Loadable({\n    loader, loading\n  })\n}","import React from 'react'\nimport { Redirect, Route, Switch, Link } from 'react-router-dom'\nimport LazyLoad from '@/components/lazyLoad.js'\nimport \"./mainLayout.scss\"\nexport default class MainLayout extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      tabbarActive: 'home'\n    }\n  }\n  render() {\n    return <div className=\"main\">\n      <Switch>\n        <Route path=\"/\" exact render={() => <Redirect to=\"/home\" />}></Route>\n        <Route path=\"/home\" component={LazyLoad(() => import('@/page/home/home.jsx'))}></Route>\n        <Route path=\"/state\" component={LazyLoad(() => import('@/page/state/state.jsx'))}></Route>\n        <Route render={() => <Redirect to=\"/home\" />}></Route>\n      </Switch>\n      <div className=\"tabbar\">\n        <div className=\"tabbar-flex\">\n          <div className={this.state.tabbarActive === 'home' ?\n            'tabbar-link active' : 'tabbar-link'}>\n            <i className=\"iconfont iconzhiboguanli\"></i>\n            <Link to=\"/home\"\n              onClick={() => { this.changeActive('home') }}\n            >\n              现场直播测试\n          </Link>\n          </div>\n          <div className={this.state.tabbarActive === 'state' ?\n            'tabbar-link active' : 'tabbar-link'}>\n            <i className=\"iconfont icondongtaigonggao\"></i>\n            <Link to=\"/state\"\n              onClick={() => { this.changeActive('state') }}\n            >\n              <span>最新动态(未开发)</span>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  }\n  changeActive(value) {\n    console.log('changeActive 456', window.a.b)\n    this.setState({\n      tabbarActive: value\n    })\n  }\n}","import React from 'react'\nimport MainLayout from './mainLayout.jsx'\nimport { HashRouter as Hash } from 'react-router-dom'\nexport default class MainRouter extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {}\n  }\n  render() {\n    // basename为路由前加项目之类，没事就不要加了\n    return <Hash basename=\"\">\n      <MainLayout></MainLayout>\n    </Hash>\n  }\n}","import React from 'react';\nimport 'antd/dist/antd.css';\nimport MainRouter from '@/router/mainRouter.jsx'\nimport * as Sentry from '@sentry/react';\nSentry.init({\n  dsn: \"http://42d63c152d5648e3a680a700322a30ec@120.48.19.90:9000/3\",\n  logErrors:true,\n  release: 'pro@1.0.1'\n});\nfunction App() {\n  return (\n    <MainRouter></MainRouter>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}